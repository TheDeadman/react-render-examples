// AUTO-GENERATED by generate-snippets.js on 2025-10-23T16:21:26.856Z
// Source: ContextOne.tsx
// Do not edit this file directly.

const snippet = `import React, {
    createContext,
    useContext,
    useState,
    ReactNode,
    useMemo,
} from 'react';

export type ListItem = { title: string; description: string };
// Define the shape of the context
interface AppContextType {
    textVal: string;
    lastUpdated: number;
    setTextVal: React.Dispatch<React.SetStateAction<string>>;
}

// Create the context with default values
const AppContext = createContext<AppContextType | undefined>(undefined);

// Create a provider to wrap the app and provide state to components
export const ContextOneProvider: React.FC<{ children: ReactNode }> = ({
    children,
}) => {
    const [textVal, setTextVal] = useState('ContextOne');
    const lastUpdated = useMemo(() => {
        return performance.now();
    }, [textVal]);

    return (
        <AppContext.Provider value={{ textVal, setTextVal, lastUpdated }}>
            {children}
        </AppContext.Provider>
    );
};

// Custom hook to use the app context
export const useAppContextOne = () => {
    const context = useContext(AppContext);
    if (!context) {
        throw new Error('useAppContext must be used within an AppProvider');
    }
    return context;
};
`;

export default snippet;
