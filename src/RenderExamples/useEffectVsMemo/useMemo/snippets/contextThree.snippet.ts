// AUTO-GENERATED by generate-snippets.js
// Source: ContextThree.tsx
// Do not edit this file directly.

const snippet = `import React, {
    createContext,
    useContext,
    useState,
    ReactNode,
    useMemo,
} from 'react';
import { useAppContextTwo } from './ContextTwo';

exportListItem = { title: string, description: string };

interface AppContextType {
    textValThree: string;
    combinedTextValThree: string;
    setTextValThree: React.Dispatch<React.SetStateAction<string>>;
}

const AppContext = createContext<AppContextType | undefined>(undefined);

export const ContextThreeProvider: React.FC<{ children: ReactNode }> = ({
    children,
}) => {
    const { combinedTextValTwo } = useAppContextTwo();
    const [textValThree, setTextValThree] = useState('ContextThree');

    const combinedTextValThree = useMemo(() => {
        return \`\${combinedTextValTwo}-\${textValThree}\`;
    }, [combinedTextValTwo, textValThree]);

    return (
        <AppContext.Provider
            value={{ textValThree, combinedTextValThree, setTextValThree }}
        >
            {children}
        </AppContext.Provider>
    );
};

// Custom hook to use the app context
export const useAppContextThree = () => {
    const context = useContext(AppContext);
    if (!context) {
        throw new Error('useAppContext must be used within an AppProvider');
    }
    return context;
};
`;

export default snippet;
