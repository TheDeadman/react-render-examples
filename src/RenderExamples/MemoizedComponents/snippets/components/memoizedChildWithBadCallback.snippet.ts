// AUTO-GENERATED by generate-snippets.js on 2025-10-17T15:59:41.866Z
// Source: MemoizedChildWithBadCallback.tsx
// Do not edit this file directly.

const snippet = `// Generate Snippet
import React, { memo } from 'react';
import { Paper, Typography, Button } from '@mui/material';
import RenderCount from '../../../overall/RenderCount';
import styles from 'MemoizedComponents.module.scss';

interface MemoizedChildWithBadCallbackProps {
    value: number;
    onIncrement: () => void;
    expensiveValue: number;
}

const MemoizedChildWithBadCallback = memo<MemoizedChildWithBadCallbackProps>(
    ({ value, onIncrement, expensiveValue }) => {
        return (
            <Paper className={\`\${styles.card} \${styles.cardOrange}\`}>
                <RenderCount componentName="MemoizedChildWithBadCallback" />
                <Typography
                    variant="h6"
                    className={\`\${styles.title} \${styles.titleOrange}\`}
                >
                    Memoized Child + Non-Memoized Function
                </Typography>
                <Typography variant="body2" className={styles.infoText}>
                    ⚠️ React.memo but new function props = Still re-renders
                </Typography>
                <Typography>Value: {value}</Typography>
                <Typography>Expensive Value: {expensiveValue}</Typography>
                <Button
                    onClick={onIncrement}
                    variant="contained"
                    className={\`\${styles.button} \${styles.buttonOrange}\`}
                >
                    Increment
                </Button>
            </Paper>
        );
    },
);

MemoizedChildWithBadCallback.displayName = 'MemoizedChildWithBadCallback';

export default MemoizedChildWithBadCallback;
`;

export default snippet;
