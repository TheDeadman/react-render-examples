// AUTO-GENERATED by generate-snippets.js on 2025-10-17T15:38:55.706Z
// Source: MemoizedChild.tsx
// Do not edit this file directly.

const snippet = `// Generate Snippet
import React, { memo } from 'react';
import { Paper, Typography, Button } from '@mui/material';
import RenderCount from '../../../overall/RenderCount';
import styles from 'MemoizedComponents.module.scss';

export const explanation =
    'This component is wrapped in React.memo() AND receives a memoized callback (useCallback). It only re-renders when its props actually change. Both conditions are necessary - React.memo() for shallow prop comparison + useCallback() for stable function references.';

interface MemoizedChildProps {
    value: number;
    onIncrement: () => void;
    expensiveValue: number;
}

const MemoizedChild = memo<MemoizedChildProps>(
    ({ value, onIncrement, expensiveValue }) => {
        return (
            <Paper className={\`\${styles.card} \${styles.cardGreen}\`}>
                <RenderCount componentName="MemoizedChild" />
                <Typography
                    variant="h6"
                    className={\`\${styles.title} \${styles.titleGreen}\`}
                >
                    Memoized Child Component
                </Typography>
                <Typography variant="body2" className={styles.infoText}>
                    âœ… React.memo + useCallback = Optimized
                </Typography>
                <Typography>Value: {value}</Typography>
                <Typography>Expensive Value: {expensiveValue}</Typography>
                <Button
                    onClick={onIncrement}
                    variant="contained"
                    className={\`\${styles.button} \${styles.buttonGreen}\`}
                >
                    Increment
                </Button>
            </Paper>
        );
    },
);

MemoizedChild.displayName = 'MemoizedChild';

export default MemoizedChild;
`;

export default snippet;
